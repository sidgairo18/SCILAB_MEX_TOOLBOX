<?xml version="1.0" encoding="UTF-8"?>
<!--
* Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
* Copyright (C) 2018 - 2018 - Scilab Enterprises
* Copyright (C) 2018-2018 - Siddhartha Gairola GSoC 2018
*
* This file is hereby licensed under the terms of the GNU GPL v2.0,
* pursuant to article 5.3.4 of the CeCILL v.2.1.
* This file was originally licensed under the terms of the CeCILL v2.1,
* and continues to be available under such terms.
* For more information, see the COPYING file which you should have received
* along with this program.
*
-->
<refentry xml:id="signed_distance_isosurface" xml:lang="en"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:ns5="http://www.w3.org/1999/xhtml"
    xmlns:mml="http://www.w3.org/1998/Math/MathML"
    xmlns:db="http://docbook.org/ns/docbook">
    <info>
        <pubdate>$LastChangedDate$</pubdate>
    </info>

    <refnamediv>
        <refname>Signed Distance Isosurface</refname>

        <refpurpose>
            Compute the contour of an iso-level of the signed distance field to a given mesh.
        </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            [V,F] = signed_distance_isosurface(IV,IF);
            [V,F] = signed_distance_isosurface(IV,IF,'ParameterName',parameter_value, ...)
        </synopsis>
    </refsynopsisdiv>

    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>IV</term>
                <listitem>
                    <para>#IV by 3 list of input mesh vertex positions</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>IF</term>
                <listitem>
                    <para>#IF by 3 list of input triangle indices</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Optional</title>
        <variablelist>
            <varlistentry>
                <term>'Level'</term>
                <listitem>
                    <para>'Level' followed by iso-level to contour in world coordinate units, negative is inside.{0}</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'AngleBound'</term>
                <listitem>
                    <para>'AngleBound' followed by lower bound on triangle angles (mesh quality) {28}</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'RadiusBound'</term>
                <listitem>
                    <para>'RadiusBound' followed by upper bound on triangle size (mesh density) as fraction of bounding box diagonal {0.02} (scale independent)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'DistanceBound'</term>
                <listitem>
                    <para>'DistanceBound' followed by cgal mysterious parameter (mesh density) as fraction of bounding box diagonal {0.02}  (scale independent)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'SignedDistanceType'</term>
                <listitem>
                    <para>'SignedDistanceType' followed by</para>
                    <para>'winding_number' use winding number (continuous sign value for non-watertight, but usually much slower)</para>
                    <para>'pseudonormal'  use pseudo-normal, binary value (but not robust for non-watertight meshes.</para>
                    <para>'unsigned' use unsigned distance (all distances are positive).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'ContouringMethod'</term>
                <listitem>
                    <para>'ContouringMethod' followed by</para>
                    <para>'cgal'  use cgal's adaptive method</para>
                    <para>'marching_cubes'  use basic grid + marching cubes</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>'GridSize'</term>
                <listitem>
                    <para>'GridSize' followed by grid size {40}</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Output</title>
        <variablelist>
            <varlistentry>
                <term>V</term>
                <listitem>
                    <para>#V by 3 list of output mesh positions</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>F</term>
                <listitem>
                    <para>#F by 3 list of output triangle indices into V</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Description></title>
        <para>SIGNED_DISTANCE_ISOSURFACE Compute the contour of an iso-level of the signed distance field to a given mesh.</para>
    </refsection>

    <refsection>
        <title>Known Issues</title>
        <para>When using 'SignedDistanceType','pseudonormal' it's very important that (V,F) is truly watertight</para>
    </refsection>

    <refsection role="see also">
        <title>See also</title>

        <simplelist type="inline">
            <member>
                <ulink url="https://github.com/alecjacobson/gptoolbox">Geometry Processing Toolbox</ulink>
            </member>
            <member>
                <link linkend="geoemtry_processing_toolbox">Geometry_Processing_Toolbox</link>
            </member>
        </simplelist>
    </refsection>
    
</refentry>
